<<< 클래스 >>>

 << 클래스의 기본 기능 >>

 [추상화]

 < 객체를 처리하는 함수 > 
    -> 9-1-3.html

 < 객체의 기능을 메소드로 추가하기 >

 반복문을 사용해 모든 객체에 getSum()과 getAverage() 메소드를 추가
    
    -> 9-1-4.html, 9-1-5.html

 9-1-5.html 에서 createStudent 함수를 만들고, 여기에 객체를 만들어 리턴하게 했음.

 이와 같이 함수를 만들면 여러가지 이득이 있다.

  - 오탈자의 위험이 줄어든다.
  - 코드를 입력하는 양이 크게 줄어든다.
  - 속성과 메소드를 한 함수 내부에서 관리할 수 있으므로 객체를 더 손쉽게 유지보수 할 수 있다.

  하지만, 객체별로 getSum(), getAverage(), toString() 메소드를 생성하므로 기본 자료형보다 무거운 자료형이 여러 번 생성되게 된다.


 [클래스]
 
 ㅇ 클래스 / 프로토타입

 - 생성자

    class 클래스 이름 {
        constructor () {
            /* 생성자 코드 */
        }
    }

 [메소드]





 <<< 클래스의 고급 기능 >>>

 << 상속 >>

 9-2-1 ~ 9-2-3.html

 << private 속성과 메소드 >>

 9-2-6,7.html

 << getters and setters >>

 9-2-9, 9-2-10.html

 << static 속성과 메소드 >>

 디자인 패턴 : 프레임 워크 개발자들이 효율적으로 프레임워크를 개발할 수 있게 고안한 패턴.

 class 클래스명 {
    static 속성 = 값
    static 메소드 () {

    }
 }

 [static 속성과 메소드]

 - 인스턴스를 만들지 않고 사용할 수 있는 속성과 메소드. 일반적인 변수와 함수처럼 사용할 수 있다.
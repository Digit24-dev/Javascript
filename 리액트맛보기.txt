<<< 자바스크립트 리액트 프레임워크 맛보기 >>>

리액트 라이브러리를 사용하면 대규모 프론트엔드 웹 앱을 체계적으로 개발할 수 있다.
리액트 네이티브를 활용해서 스마트폰에서도 빠른 속도로 작동하는 앱을 만들 수 있다.

http://ko.reactjs.org/

 - react.development.js
 - react-dom.development.js     : 리액트 사용을 위해 필수
 - babel.min.js                 : 리액트 코드를 쉽게 작성

 // 리액트 라이브러리는 자바스크립트가 아니라 리액트를 위해서 개발된 자바스크립트 확장 문법을 사용한다.
 // 이러한 문법을 사용하기 위해선 바벨이라는 라이브러리를 추가로 읽어들이고 바벨을 적용할 부분을 지정해야한다.

 << 루트 컴포넌트 출력하기 >>

 리액트는 사용자 인터페이스를 쉽게 구성할 수 있게 도와주는 라이브러리이다. 리액트에서는 화면에 출력되는 요소를 '컴포넌트'라고 부른다.
 그 중 가장 최상위에 배치하는 컴포넌트를 루트 컴포넌트라고 부른다. 리액트는 컴포넌트를 만들때 HTML요소를 만드는 것과 동일한 문법을 사용한다.

 <컴포넌트 이름></컴포넌트 f이름>

 - 생성한 컴포넌트를 출력할 때에는 ReactDOM.render() 메소드를 사용한다. 컨테이너는 컴포넌트를 출력할 상자라고 생각해도 된다.

 ReactDOM.render(컴포넌트, 컨테이너)


 << JSX 자바스크립트 확장 문법 >>

 - 자바스크립트 코드 내부에 HTML 코드를 사용하는 것. 바벨이 JSX 코드를 읽고 일반적인 자바스크립트 문법으로 변환한 뒤 실행해준다.


 << JSX 기본 문법 >>

 JSX 문법은 단순하게 태그를 만드는 기능 이외에도 태그 내부에 표현식을 삽입하여 출력하는 기능도 제공한다. (단, 속성으로 표현식을 출력할 때에는 따옴표를 사용하면 안된다.)

 [표현식 출력하기]

 <태그>{표현식}</태그>
 <태그 속성={표현식} />
              ㄴ 따옴표를 사용하면 안된다.

 


 << 클래스 컴포넌트 >> 

 - 클래스 컴포넌트
 - 함수 컴포넌트

 
 << 컴포넌트의 기본적인 속성과 메소드 >> 

 메소드 오버라이드

  class App extends React.Component {
    constructor (props) {
        super(props)
        // 생성자 코드
    }

    render() {
        // 출력할 것
    }

    componentDidMount() {
        // 컴포넌트가 화면에 출력될 때 호출
    }

    componentWillunmount() {
        // 컴포넌트가 화면에서 제거될 때 호출
    }

    // 컴포넌트가 내부적으로 특정 상황에 호출하는 메소드. 라이프사이클 메소드 라고도 부른다.

  }


  - 변경해서 사용하는 속성으로 'state' 속성이 있다. 이 속성에는 출력할 값을 저장한다.
  state 속성을 변경할 때에는 반드시 setState() 메소드를 사용한다. setState() 메소드로 속성값을 변경하면 컴포넌트는 render() 메소드를 호출하여 화면에 변경 사항을 출력한다.

  this.state = { 속성 : 값 }
  this.setState({ 변경할 속성: 값})



  << 이벤트 연결하기 >>

  컴포넌트에 이벤트를 연결할 때는

  1. 메소드를 선언
  2. 메소드에 this를 바인드
  3. render() 메소드에서 출력하는 태그의 이벤트 속성에 메소드를 입력해서 이벤트를 연결.

  class App extends React.Component {
    constructor (props) {
        super(props)
        this.메소드 이름 = this.메소드 이름.bind(this) -> ***메소드에 this를 바인드

        // 생성자 코드
    }

    render() {
        // 출력할 것
        return <h1 이벤트 이름={this.메소드 이름}></h1>
    }

    메소드 이름(event){
        // 이벤트 호출시 실행할 코드
    }
  }

  10-1-6.html 참조

    *이벤트 주의사항

    HTML은 기본적으로 대소문자를 구분하지 않으나, JSX 문법에서 이벤트를 연결할 때는 onClick으로 대소문자를 확실하게 지켜서 입력해야 한다.

  - 참조 : 10-1-7, 10-1-8 함수를 선언하는 방식의 다양성


 << 리액트 스타일 지정하기 >>

 스타일을 지정할 때에는 style 속성에 객체를 지정한다.

 render() {
    const style = {}
    return <h1 style={style}>글자</h1>
 }

  style 객체에는 캐멀 케이스(첫글자가 소문자고 나머지 중간 글자는 대문자)로 속성을 입력한다.

  문서 객체 모델 때와 차이점이 있다면 숫자를 입력할 때 단위를 입력하지 않아도 된다.

  CSS 스타일        가능한 형태 1       가능한 형태 2
  color: red        {color: 'red'}     {'color': 'red'}
  font-size: 2px    {fontSize: 2}      {'font-size': 2}



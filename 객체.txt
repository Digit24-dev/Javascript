[ 객체 ]

 실제로 존재하는 사물을 의미하고 이름과 값으로 구성된 속성을 가진 자바스크립트 기본 타입.

    <====================예시=======================>
        const product = {
            제품명  : '7D 건조 망고',
            유형    : '당절임',
            성분    : '망고, 설탕',
            원산지  : '필리핀'
        }
    <====================끝=========================>

    product['제품명'] ---> '7D 건조 망고'
    product.제품명 ---> '7D 건조 망고'

    <====================예시=======================>
        const object = {
            "with space" : 273,
            "with @#$@$#^%&#$%" : 23
        }
        
        위와 같은 경우에는 호출 시에 대괄호 []를 사용하여 호출해야함.

    <====================끝=========================>

 <<< 동적으로 객체 속성 추가 / 제거 >>>

 - 추가
    <====================예시=======================>
        const student = {}
        student.이름 = '최재혁'
        student.취미 = '게임'
        student.장래희망 = 'CTO'
        
        console.log(JSON.stringify(student, null, 2))

        <--- 출력 --->
        {
            이름 : '최재혁',
            취미 : '게임',
            장래희망 : 'CTO'
        }
    <====================끝=========================>

 - 제거
    <====================예시=======================>
        delete student.취미

        console.log(JSON.stringify(student, null, 2))

        <--- 출력 --->
        {
            이름 : '최재혁',
            장래희망 : 'CTO'
        }
    <====================끝=========================>



<<< 6.2 객체의 속성과 메소드 사용하기 >>>

 자바스크립트 자료형  --- 기본 자료형  - 1) 숫자    2) 문자열   3) 불
                    |
                    |
                    ㄴ-- 객체 자료형  ㅡ 1) 함수
                                     ㄴ 2) 배열
                                     ㄴ 이외 모두 ...

 << 1. 객체 자료형 >>

  함수는 '실행 가능한 객체'이다.


 << 2. 기본 자료형 >>

  숫자, 문자열, 불

  << 2.1 기본 자료형을 객체로 선언하기 >>

  const 객체 = new 객체 자료형 이름()

    <====================예시=======================>
    
    const f = new Number(273)   // new Numbewr('문자열') 로 대입하면 -> f > Number{ NaN } 으로 출력된다. {Number()에 String 넣으면 NaN으로 출력된다는 뜻.}
    f.sample = 10

    f.sample >>> 10

    <====================끝=========================>



  << 2.2 기본 자료형의 일시적 승급 >>

  기본 자료형("일반적으로 상수로 취급되는 문자열에서도")에서도 함수를 사용할 수 있음.

  "문자열".anchor('greeting')
  [출력] <a name="greeting">문자열</a>

  "문자".bold()
  [출력] <b>문자</b>

  - 위는 일시적으로 승급하는 내용이라, 다음 코드에서는 실행되지 않음.

<< 2.3 프로토타입으로 메소드 추가하기 >>

prototype 객체에 속성과 메소드를 추가하면 모든 객체(와 기본 자료형)에서 해당 속성과 메소드를 사용할 수 있다.

[형식]
 객체 자료형 이름.prototype.메소드 이름 = function(){

 }
 
    <====================예시=======================>

    Number.prototype.sampe = 10
    > 10

    const i = 273
    > undefined

    i.sample
    > 10
    
    <====================끝=========================>

    <====================예시=======================>

    Number.prototype.power = function( n = 2){
        return this.valueOf() ** n
    }

    const a = 12
    console.log(a.power())
    console.log(a.power(3))
    console.log(a.power(4))

    <--- 출력 --->
    144
    1728
    20736

    <====================끝=========================>

    *일반적으로 객체 내부에서 값을 꺼내 쓰는 것임을 명확하게 하기 위하여 valueOf() 메소드를 사용한다.
    
  << 2.4 배열 내부에 어떤 문자열이 있는지 확인 >>

   - indexOf('thing')

   배열 내에서 'thing'을 찾아 인덱스를 반환한다. 없을 시에 '-1' 을 반환한다.

   - contains('thing')

   배열 내에서 'thing'을 찾아 Boolean 형태로 반환한다.


   << 2.5 Number 객체 >>

   - toFixed()
   - isNaN()
   - isFinite()


   << 2.6 String 객체 >>

   - trim() : 문자열 양쪽 끝의 공백 없앰
   - split() : 문자열을 특정 기호로 자르기
   - 속성 length


   << 2.7 JSON 객체 >>

   기본적으로 제공되는 내장 객체

   - JSON.stringify : 자바스크립트 객체를 JSON 문자열로 변환할 때 사용.

    JSON.stringify(data, null, 2)
        ㄴ 2번째 파라미터 : 객체에서 어떤 속성만 선택해서 추출하고 싶을 때 사용.
        ㄴ 3번째 파라미터 : 들여쓰기를 2칸으로 설정.


    << 2.8 Math 객체 >>

    - Math.random() : 0 이상 1 미만의 랜덤한 숫자를 출력


    << 2.9 외부 Script 파일 읽어들이기 >>

    HTML 파일과 Javascript 파일을 분리한다.
    

    <====================예시=======================>
    [test.HTML]
    <script src="test.js"></script>

    [test.js]
    console.log("hello")

    <--- 출력 --->
    hello

    <====================끝=========================>



    << 2.10 Lodash 라이브러리 >>

    외부 라이브러리. 

    -sortBy() 메소드

        < _ 객체 >

        _ 객체 안에는 많은 메소드를 담고 있다.

        <====================예시=======================>
            const books = [{
                name: '1',
                price: 1200,
                publisher: '한빛'
            },{
                name: '2',
                price: 1000,
                publisher: '한빛'
            },{
                name: '3',
                price: 2800,
                publisher: '한빛'
            },{
                name: '4',
                price: 4900,
                publisher: '한빛'
            }]

            const output = _.sortBy(books, (book) => book.price )
            console.log(JSON.stringify(output, null, 2))

            <--- 출력 --->
            [
                {
                    name: '2',
                    price: 1000,
                    publisher: '한빛'
                },
                {
                    name: '1',
                    price: 1200,
                    publisher: '한빛'
                },
                {
                    name: '3',
                    price: 2800,
                    publisher: '한빛'
                },
                {
                    name: '4',
                    price: 4900,
                    publisher: '한빛'
                }
            ]
            *price 로 정렬된다.
        <====================끝=========================>


 <<< 6.3 객체와 배열 고급 >>>

  << 객체 내부에 특정 속성이 있는지 확인 하기. >>

    <====================예시=======================>
    
        if(object.name !== undefined){
            있음
        }else{
            없음
        }

        if(object.name){
            있음
        }else{
            없음
        }

        object.name || console.log('있음')

    <====================끝=========================>

 << 객체 기본 속성 지정하기 >>

  <====================예시=======================>
        
        object.name = object.name || '디폴트 값'

  <====================끝=========================>